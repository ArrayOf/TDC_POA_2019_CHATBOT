unit DialogFlowRequest;

{*******************************************************************************
    Generated By   : JsonToDelphiClass - 0.65 
    Project link   : https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
    Generated On   : 2019-11-28 01:18:36

    Created By     : Petar Georgiev - (http://pgeorgiev.com) 
    Adapted Web By : Marlon Nardi - (http://jsontodelphi.com)
*******************************************************************************}

interface

uses Generics.Collections, Rest.Json;

type

TPayloadClass = class
private
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPayloadClass;
end;

TOriginalDetectIntentRequestClass = class
private
  FPayload: TPayloadClass;
public
  property payload: TPayloadClass read FPayload write FPayload;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TOriginalDetectIntentRequestClass;
end;

TIntentClass = class
private
  FDisplayName: String;
  FName: String;
public
  property displayName: String read FDisplayName write FDisplayName;
  property name: String read FName write FName;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TIntentClass;
end;

TParametersClass = class
private
  FProduct: String;
public
  property product: String read FProduct write FProduct;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TParametersClass;
end;

TQueryResultClass = class
private
  FAction: String;
  FAllRequiredParamsPresent: Boolean;
  FIntent: TIntentClass;
  FIntentDetectionConfidence: Extended;
  FLanguageCode: String;
  FParameters: TParametersClass;
  FQueryText: String;
public
  property action: String read FAction write FAction;
  property allRequiredParamsPresent: Boolean read FAllRequiredParamsPresent write FAllRequiredParamsPresent;
  property intent: TIntentClass read FIntent write FIntent;
  property intentDetectionConfidence: Extended read FIntentDetectionConfidence write FIntentDetectionConfidence;
  property languageCode: String read FLanguageCode write FLanguageCode;
  property parameters: TParametersClass read FParameters write FParameters;
  property queryText: String read FQueryText write FQueryText;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TQueryResultClass;
end;

TDialogFlowRequest = class
private
  FOriginalDetectIntentRequest: TOriginalDetectIntentRequestClass;
  FQueryResult: TQueryResultClass;
  FResponseId: String;
  FSession: String;
public
  property originalDetectIntentRequest: TOriginalDetectIntentRequestClass read FOriginalDetectIntentRequest write FOriginalDetectIntentRequest;
  property queryResult: TQueryResultClass read FQueryResult write FQueryResult;
  property responseId: String read FResponseId write FResponseId;
  property session: String read FSession write FSession;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TDialogFlowRequest;
end;

implementation

{TPayloadClass}


function TPayloadClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPayloadClass.FromJsonString(AJsonString: string): TPayloadClass;
begin
  result := TJson.JsonToObject<TPayloadClass>(AJsonString)
end;

{TOriginalDetectIntentRequestClass}

constructor TOriginalDetectIntentRequestClass.Create;
begin
  inherited;
  FPayload := TPayloadClass.Create();
end;

destructor TOriginalDetectIntentRequestClass.Destroy;
begin
  FPayload.Free;
  inherited;
end;

function TOriginalDetectIntentRequestClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TOriginalDetectIntentRequestClass.FromJsonString(AJsonString: string): TOriginalDetectIntentRequestClass;
begin
  result := TJson.JsonToObject<TOriginalDetectIntentRequestClass>(AJsonString)
end;

{TIntentClass}


function TIntentClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TIntentClass.FromJsonString(AJsonString: string): TIntentClass;
begin
  result := TJson.JsonToObject<TIntentClass>(AJsonString)
end;

{TParametersClass}


function TParametersClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TParametersClass.FromJsonString(AJsonString: string): TParametersClass;
begin
  result := TJson.JsonToObject<TParametersClass>(AJsonString)
end;

{TQueryResultClass}

constructor TQueryResultClass.Create;
begin
  inherited;
  FParameters := TParametersClass.Create();
  FIntent := TIntentClass.Create();
end;

destructor TQueryResultClass.Destroy;
begin
  FParameters.Free;
  FIntent.Free;
  inherited;
end;

function TQueryResultClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TQueryResultClass.FromJsonString(AJsonString: string): TQueryResultClass;
begin
  result := TJson.JsonToObject<TQueryResultClass>(AJsonString)
end;

{TDialogFlowRequest}

constructor TDialogFlowRequest.Create;
begin
  inherited;
  FQueryResult := TQueryResultClass.Create();
  FOriginalDetectIntentRequest := TOriginalDetectIntentRequestClass.Create();
end;

destructor TDialogFlowRequest.Destroy;
begin
  FQueryResult.Free;
  FOriginalDetectIntentRequest.Free;
  inherited;
end;

function TDialogFlowRequest.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDialogFlowRequest.FromJsonString(AJsonString: string): TDialogFlowRequest;
begin
  result := TJson.JsonToObject<TDialogFlowRequest>(AJsonString)
end;

end.
